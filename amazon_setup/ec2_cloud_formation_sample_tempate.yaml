AWSTemplateFormatVersion: 2010-09-09
Description: A template to launch an ec2 instance and associate elastic IP to it.

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  MyNewEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      AvailabilityZone: us-east-1
      SecurityGroupIds:
        - <securityGroupId>
      KeyName: <sshkeyName>
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '8'
            DeleteOnTermination: 'true'
            Encrypted: 'false'
      IamInstanceProfile: <instance-profile-name>
      Tags:
        - Name: <ec2 name>
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install python3.8
            python3.8 get-pip.py --user

            mkdir task_email_alerts
            cd task_email_alerts
            aws s3 cp s3://<bucket-name>/send_grid_python send_grid_python --recursive
            aws s3 cp s3://<bucket-name>/main.py main.py
            aws s3 cp s3://<bucket-name>/requirements.txt requirements.txt

            cd ~
            aws s3 cp s3://task-alerts/cron_file_info.txt cron_file_info.txt
            cd task_email_alerts
            python3.8 -m venv email_alert_env
            source email_alert_env/bin/activate
            pip install -r requirements.txt

            cd ~
            bash -c 'crontab cron_file_info.txt'

  eniAssociation:
      Type: AWS::EC2::EIPAssociation
      Properties:
        AllocationId: <elasticIpAllocationId>
        InstanceId: !Ref MyNewEC2Instance
